@if (Item.Quantity > 0)
{
    <tr>
        <td>@Item.Product.Name</td>
        <td class="text-center">@Item.Quantity</td>
        <td class="text-center">@Item.PurchasePrice.ToString("c")</td>
        <td class="text-center">@Cost().ToString("c")</td>
        <td>
            <button class="btn btn-success text-center" title="Increase" style="background-color: grey;" @onclick="IncreaseQuantity"><i class="bi bi-bag-plus"></i></button>
            <button class="btn btn-warning text-center" title="Decrease" style="background-color: grey;" @onclick="DecreaseQuantity"><i class="bi bi-bag-dash"></i></button>
            <button class="btn btn-danger text-center" title="Remove" style="background-color: red;" @onclick="RemoveItem"><i class="bi bi-bag-x"></i></button>
        </td>
    </tr>
}

@code {
    [Parameter]
    public ShoppingItem Item { get; set; } = new ShoppingItem();

    [Parameter]
    public EventCallback<MouseEventArgs> OnQuantityChanged { get; set; }

    private async Task IncreaseQuantity()
    {
        Item.Quantity++;

        await OnQuantityChanged.InvokeAsync();
    }

    private async Task DecreaseQuantity()
    {
        if (Item.Quantity > 1)
        {
            Item.Quantity--;

            await OnQuantityChanged.InvokeAsync();
        }
    }

    private async Task RemoveItem()
    {
        Item.Quantity = 0;

        await OnQuantityChanged.InvokeAsync();
    }

    private Double Cost()
    {
        return Item.Quantity * Item.PurchasePrice;
    }
}
